User Interaction Flow
User opens the app.
User clicks "Load CSV" and selects the metadata.csv file.
The data from the CSV populates the table view.
User can type in the search box and click "Search" (or press Enter) to filter the table data.
User can click "Clear" to remove the search filter.
User selects a row in the table.
The map view updates to show the location from the selected row's latitude and longitude, placing a marker on the map.
This minimal design provides the core functionality you need: loading data, displaying it in a structured way, searching, and visualizing locations on a map.



************************************888
To use SQL-like functions, we would typically load the data into a temporary, in-memory database (like SQLite, which is often available with Python) instead of just keeping it in a pandas DataFrame. Then, the user's queries could be translated into SQL statements executed against this database.
This would involve significant changes to how the application handles data:
Data Loading: Instead of pd.read_csv, we would use a library like Python's built-in sqlite3 to create an in-memory database and load the CSV data into a table within it.
Query Interface: The UI's search input might become a larger text area to allow the user to type SQL SELECT statements (or parts of them).
Data Model: The CsvModel would need to be rewritten to:
Hold a connection to the SQLite database.
Execute SQL queries received from the UI.
Fetch the results of the SQL query.
Present these results to the QTableView in a format it understands (like a list of rows/columns).
Filtering Logic: The filter_data method would be replaced by a method that takes an SQL query string, executes it, and updates the model with the result set.
Map Update: The logic for updating the map based on the selected row would still work, but it would be getting data from the results of the SQL query instead of the pandas DataFrame slice.
This approach gives you a powerful query engine but is more complex to implement than the current pandas filtering.
Would you like to proceed with modifying the application to use an in-memory SQLite database and SQL querying?
