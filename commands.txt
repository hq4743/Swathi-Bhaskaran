Using direct Python timestamp calculations instead of SQLite's strftime
Properly handling the time components (00:00:00 for start of day, 23:59:59 for end of day)
Using CAST(timestamp AS REAL) to ensure proper numeric comparison
You can now use any of these timestamp filters:
timestamp BETWEEN '2022-07-01' AND '2022-07-31' (for a specific date range)
timestamp > '2022-07-01' (for data after a specific date)
timestamp LIKE '2022%' (for all data in 2022)



CAST(latitude AS REAL) BETWEEN 42.600220 AND 42.700220 AND CAST(longitude AS REAL) BETWEEN -83.269260 AND -83.169260